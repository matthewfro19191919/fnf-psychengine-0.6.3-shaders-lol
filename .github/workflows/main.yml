# This is a basic workflow to help you get started with Actions

name: Build


# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main, experimental ]
  pull_request:
    branches: [ main, experimental ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  # This workflow contains a single job called "build"
  buildLinux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.7

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.4
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          sudo apt-get install libvlc-dev
          sudo apt-get install libvlccore-dev
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          chmod +x ./setup/unix.sh
          sh ./setup/unix.sh
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build Project.xml linux --app-version="4.0.0-${{ github.run_id}}" -D officialBuild
      - name: Publish Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: linuxBuild
          path: 'export/release/linux/bin'
  buildWindows:
    runs-on: windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.7

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.4
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hxcpp > /dev/null --quiet
          .\"setup/windows.bat"
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build windows --app-version="4.0.0-${{ github.run_id}}"  -D officialBuild
      - name: Publish Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: windowsBuild
          path: export/release/windows/bin
  buildMac:
    runs-on: macos-15

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.7

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.4
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          chmod +x ./setup/unix.sh
          sh ./setup/unix.sh
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build mac --app-version="4.0.0-${{ github.run_id}}"  -D officialBuild
      - name: Publish Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: macBuild
          path: export/release/macos/bin
  Build:
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: Windows
            os: windows-2019
            buildArgs: windows
            artifactName: windowsBuild
            artifactPath: export\release\windows\bin\*
          - name: Linux
            os: ubuntu-22.04
            buildArgs: linux
            artifactName: linuxBuild
            artifactPath: export/release/linux/bin/*
          - name: macOS x86_64
            os: macos-13
            buildArgs: "mac -D HXCPP_M64"
            artifactName: macOSBuild-x86_64
            artifactPath: export/release/macos/bin/*
    uses: ./.github/workflows/build.yml
    with:
        name: ${{ matrix.name }}
        os: ${{ matrix.os }}
        buildArgs: ${{ matrix.buildArgs }}
        artifactName: ${{ matrix.artifactName }}
        artifactPath: ${{ matrix.artifactPath }}
